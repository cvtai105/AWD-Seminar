name: Deploy Identity Service to Azure Virtual Machine 

on:
  push:
    paths: 
      - '.github/workflows/IdentityService-CD.yml'
    branches: [ main ]

env:
  version: 1.0.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ‚öôÔ∏è
        uses: actions/checkout@v4
    
      - name: Make .env file üìÑ
        run: |
          echo "GOOGLE_CLIENT_ID=907759503353-5v3aon6s0fdhklod6qsc6bedrt3vketk.apps.googleusercontent.com" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          
          echo "CORS_ALLOWED_ORIGINS=*" >> .env

          echo "DB_CONNECTION_STRING=Host=Database;Port=5432;Database=testdb;Username=postgres;Password=postgres;SSL Mode=Require" >> .env

          echo "JWT_SECRET=test-secret-key" >> .env
          echo "JWT_ISSUER=http://localhost:8080" >> .env
          echo "JWT_AUDIENCE=http://localhost:8080" >> .env

          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_USER=postgres" >> .env
          echo "POSTGRES_PASSWORD=postgres" >> .env
          echo "POSTGRES_DB=testdb" >> .env

          echo "VITE_IDENTITY_API_URL=http://localhost:8080" > .env
          echo "VITE_GOOGLE_CLIENT_ID=907759503353-5v3aon6s0fdhklod6qsc6bedrt3vketk.apps.googleusercontent.com" >> .env
          echo "VITE_GOOGLE_REDIRECT_URI=http://localhost:5173/oauth2/google/redirected" >> .env
          echo "VITE_TMDB_API_KEY=b745e42d282162944bdee5b09b352958" >> .env
          echo "VITE_TMDB_API_URL=https://api.themoviedb.org/3" >> .env
          echo "VITE_TMDB_ACCESS_TOKEN=eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiNzQ1ZTQyZDI4MjE2Mjk0NGJkZWU1YjA5YjM1Mjk1OCIsIm5iZiI6MTczMzg2NTE2My41MzEwMDAxLCJzdWIiOiI2NzU4YWVjYjk5MzU5YjA0NjhhNDc0N2MiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.WzMAVBJs0tAWE2n1cu6wh2591xPm8QX6D8eNkTmMF38" >> .env

      # Start apis and database
      - name: Start containers üê≥
        run: |
          docker compose -f docker-compose.dev.yml up -d

      # Setup and test locally
      - name: Install node ‚öôÔ∏è
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ‚öôÔ∏è
        uses: actions/checkout@v4
      
      - name: Make .env file üìÑ
        run: |
          echo "IDENTITY_API_VERSION=${{ env.version }}" > .env
          echo "CORS_ALLOWED_ORIGINS=*" >> .env
          echo "DB_CONNECTION_STRING=Host=ep-summer-mode-a1edo8x9.ap-southeast-1.aws.neon.tech;Port=5432;Database=verceldb;Username=default;Password=3Qkce7WuiHDo;SSL Mode=Require" >> .env
          echo "GOOGLE_CLIENT_ID=907759503353-5v3aon6s0fdhklod6qsc6bedrt3vketk.apps.googleusercontent.com" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "JWT_ISSUER=http://localhost:8080" >> .env
          echo "JWT_AUDIENCE=http://localhost:8080" >> .env

      - name: Login to Docker Hub üê≥
        uses: docker/login-action@v2
        with:
          username: cvtai
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      #   with:
      #     driver: docker
        
      # - name: Build and Push images for ARM64 üê≥
      #   run: |
      #     cd IdentityService
      #     docker push cvtai/seminar-identity-api-arm64:${{ env.version }}
      #     cd ..

      - name: Build and Push images üê≥
        run: |
          docker compose -f docker-compose.host.yml build identity-api
          docker compose -f docker-compose.host.yml push
  
      - name: Copy file via SSH üöÄ
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env,docker-compose.host.yml"
          target: Seminar-CI-CD/

      - name: Pull and Deploy via SSH üöÄ
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd Seminar-CI-CD
            docker ps
            docker compose -f docker-compose.host.yml pull
            docker compose -f docker-compose.host.yml up -d
            docker ps

       